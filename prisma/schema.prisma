generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String           @id @default(uuid())
  username        String
  email           String           @unique
  passwordHash    String
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  favoriteRecipes FavoriteRecipe[]
  ratings         Rating[]
  Recipe          Recipe[]

  diets       UserDiet[]
  allergies   UserAllergy[]
  preferences UserPreference[]
  Comment     Comment[]
}

model Recipe {
  id              Int                  @id @default(autoincrement())
  title           String               @unique
  description     String
  instructions    RecipeInstructions[]
  cookingTime     Int
  servings        Int
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt
  favoriteRecipes FavoriteRecipe[]
  ratings         Rating[]
  ingredients     RecipeIngredient[]
  author          User?                @relation(fields: [authorId], references: [id])
  authorId        String?
  Comment         Comment[]
}

model RecipeInstructions {
  id           Int    @id @default(autoincrement())
  recipeId     Int
  instructions String
  recipe       Recipe @relation(fields: [recipeId], references: [id])
}

model RecipeIngredient {
  id       Int    @id @default(autoincrement())
  recipeId Int
  name     String
  recipe   Recipe @relation(fields: [recipeId], references: [id])
}

model Rating {
  id     Int @id @default(autoincrement())
  rating Int

  comment   Comment @relation(fields: [commentId], references: [id])
  commentId Int

  user   User   @relation(fields: [userId], references: [id])
  userId String

  recipe   Recipe @relation(fields: [recipeId], references: [id])
  recipeId Int

  createdAt DateTime @default(now())

  @@unique([userId, recipeId])
}

model Comment {
  id      Int    @id @default(autoincrement())
  content String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  recipe   Recipe @relation(fields: [recipeId], references: [id])
  recipeId Int

  children Comment[] @relation("comment_children")
  parent   Comment?  @relation("comment_children", fields: [parentId], references: [id])
  parentId Int?

  createdAt DateTime @default(now())
  Rating    Rating[]
}

model FavoriteRecipe {
  id        Int      @id @default(autoincrement())
  userId    String
  recipeId  Int
  createdAt DateTime @default(now())
  recipe    Recipe   @relation(fields: [recipeId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

// ==================================
// User preferences
// ==================================
model UserDiet {
  id     Int    @id @default(autoincrement())
  userId String
  user   User   @relation(fields: [userId], references: [id])

  diet String
}

model UserAllergy {
  id     Int    @id @default(autoincrement())
  userId String
  user   User   @relation(fields: [userId], references: [id])

  allergy String
}

model UserPreference {
  id     Int    @id @default(autoincrement())
  userId String
  user   User   @relation(fields: [userId], references: [id])

  preference String
}
